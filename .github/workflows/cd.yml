name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - testing
        - preproduction
        - production

# Add permissions needed for OIDC
permissions:
  id-token: write
  contents: read

jobs:
  determine_environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Determine environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
            if [ "${{ github.event.workflow_run.head_branch }}" = "main" ]; then
              echo "environment=production" >> $GITHUB_OUTPUT
            else
              echo "environment=development" >> $GITHUB_OUTPUT
            fi
          else
            echo "Workflow run was not successful. Exiting."
            exit 1
          fi

  deploy:
    needs: determine_environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine_environment.outputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1  # Specify a default region
          audience: sts.amazonaws.com
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      
      - name: Make Terraform state bucket script executable
        run: chmod +x IaC/scripts/create-tf-state-bucket.sh
      
      - name: Create Terraform state bucket if it doesn't exist
        run: |
          ENV_NAME=$(echo "${{ needs.determine_environment.outputs.environment }}" | cut -c1-4)
          ./IaC/scripts/create-tf-state-bucket.sh -b terraform-state-myproject-$ENV_NAME -r us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
            
      - name: Set environment specific variables
        id: env-vars
        run: |
          ENV_NAME="${{ needs.determine_environment.outputs.environment }}"
          SHORT_ENV=$(echo "$ENV_NAME" | cut -c1-4)
          
          if [ "$ENV_NAME" = "production" ]; then
            echo "tf_workspace=production" >> $GITHUB_OUTPUT
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          elif [ "$ENV_NAME" = "preproduction" ]; then
            echo "tf_workspace=preproduction" >> $GITHUB_OUTPUT
            echo "image_tag=preprod" >> $GITHUB_OUTPUT
          elif [ "$ENV_NAME" = "testing" ]; then
            echo "tf_workspace=testing" >> $GITHUB_OUTPUT
            echo "image_tag=test" >> $GITHUB_OUTPUT
          else
            echo "tf_workspace=development" >> $GITHUB_OUTPUT
            echo "image_tag=develop-latest" >> $GITHUB_OUTPUT
          fi

        # Add these steps after the "Login to Amazon ECR" step
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: IaC/docker/Dockerfile.prod
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ steps.env-vars.outputs.tf_workspace }}-wagtail-app:${{ steps.env-vars.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      
      - name: Create Terraform variables file
        run: |
          cd IaC/terraform/environments/${{ steps.env-vars.outputs.tf_workspace }}
          
          # Prepare secrets - strip any newlines and escape special characters
          DOMAIN_NAME=$(echo '${{ secrets.DOMAIN_NAME }}' | tr -d '\n\r')
          DB_USERNAME=$(echo '${{ secrets.DB_USERNAME }}' | tr -d '\n\r')
          DB_PASSWORD=$(echo '${{ secrets.DB_PASSWORD }}' | tr -d '\n\r')
          SECRET_KEY=$(echo '${{ secrets.DJANGO_SECRET_KEY }}' | tr -d '\n\r')
          S3_ACCESS_KEY=$(echo '${{ secrets.S3_ACCESS_KEY_ID }}' | tr -d '\n\r')
          S3_SECRET_KEY=$(echo '${{ secrets.S3_SECRET_ACCESS_KEY }}' | tr -d '\n\r')
          CF_TOKEN=$(echo '${{ secrets.CLOUDFLARE_API_TOKEN }}' | tr -d '\n\r')
          CF_ZONE_ID=$(echo '${{ secrets.CLOUDFLARE_ZONE_ID }}' | tr -d '\n\r')
          ACM_CERT_ARN=$(echo '${{ secrets.ACM_CERTIFICATE_ARN }}' | tr -d '\n\r')
          SUPERUSER_USERNAME=$(echo '${{ secrets.SUPERUSER_USERNAME }}' | tr -d '\n\r')
          SUPERUSER_EMAIL=$(echo '${{ secrets.SUPERUSER_EMAIL }}' | tr -d '\n\r')
          SUPERUSER_PASSWORD=$(echo '${{ secrets.SUPERUSER_PASSWORD }}' | tr -d '\n\r')
          
          # Create terraform.tfvars file with properly sanitized values
          cat > terraform.tfvars <<EOF
          aws_region             = "us-east-1"
          app_name               = "wagtail-app"
          app_image_tag          = "${{ steps.env-vars.outputs.image_tag }}"
          db_username            = "${DB_USERNAME}"
          db_password            = "${DB_PASSWORD}"
          secret_key             = "${SECRET_KEY}"
          aws_access_key_id      = "${S3_ACCESS_KEY}"
          aws_secret_access_key  = "${S3_SECRET_KEY}"
          domain_name            = "${DOMAIN_NAME}"
          cloudflare_api_token   = "${CF_TOKEN}"
          cloudflare_zone_id     = "${CF_ZONE_ID}"
          acm_certificate_arn    = "${ACM_CERT_ARN}"
          superuser_username     = "${SUPERUSER_USERNAME}"
          superuser_email        = "${SUPERUSER_EMAIL}"
          superuser_password     = "${SUPERUSER_PASSWORD}"
          EOF
          
          # Verify the file is valid Terraform syntax
          echo "Validating terraform.tfvars format..."
          terraform fmt -check terraform.tfvars || {
            echo "Warning: terraform.tfvars might have formatting issues."
            # Display file without secrets
            echo "File structure:"
            grep -v "password\|key\|token\|arn" terraform.tfvars
          }
      
      - name: Terraform Init
        run: |
          cd IaC/terraform/environments/${{ steps.env-vars.outputs.tf_workspace }}
          terraform init
      
      - name: Terraform Plan
        run: |
          cd IaC/terraform/environments/${{ steps.env-vars.outputs.tf_workspace }}
          terraform plan -out=tfplan
      
      - name: Terraform Apply
        run: |
          cd IaC/terraform/environments/${{ steps.env-vars.outputs.tf_workspace }}
          terraform apply -auto-approve tfplan
      
      - name: Update ECS service
        run: |
          ENV_NAME="${{ needs.determine_environment.outputs.environment }}"
          SHORT_ENV=$(echo "$ENV_NAME" | cut -c1-4)
          
          aws ecs update-service --cluster $SHORT_ENV-cluster \
            --service $SHORT_ENV-wagtail-app \
            --force-new-deployment 
name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    environment: env
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Auto-format code with black
        run: |
          black .

      - name: Check code formatting with black
        run: |
          black --check .

      - name: Format and sort imports
        run: |
          black . --quiet
          isort . --profile black

  test:
    runs-on: ubuntu-latest
    environment: env
    needs: lint
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: myproject_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with pytest and coverage
        env:
          DEBUG: "True"
          SECRET_KEY: "testing-secret-key"
          DATABASE_URL: "postgres://postgres:postgres@localhost:5432/myproject_test"
        run: |
          coverage run -m pytest
          coverage report
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    environment: env
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
       # Print system resources before build
      - name: Check system resources
        run: |
          echo "=== System Resources ==="
          free -h
          df -h
          echo "=== Process Count ==="
          ps aux | wc -l
        
          # Analyze build context size
      - name: Analyze build context
        run: |
          echo "=== Build Context Analysis ==="
          find . -type f -not -path "*/\.*" | wc -l
          echo "Total files (excluding hidden): $(find . -type f -not -path "*/\.*" | wc -l)"
          echo "Total size: $(du -sh . | cut -f1)"
          echo "Largest directories:"
          du -h --max-depth=1 . | sort -hr | head -10
          echo "Largest files:"
          find . -type f -not -path "*/\.*" -exec du -h {} \; | sort -hr | head -10
      
      # Create a minimal .dockerignore
      - name: Create minimal dockerignore
        run: |
          echo "=== Creating minimal .dockerignore ==="
          cat > .dockerignore << 'EOF'
          .git
          .github
          __pycache__
          *.pyc
          *.pyo
          *.pyd
          .Python
          env/
          venv/
          .env
          .venv
          node_modules/
          .coverage
          htmlcov/
          .tox/
          .pytest_cache/
          EOF
          cat .dockerignore
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
        
      - name: Set environment and tag
        run: |
          if [ "${{ env.BRANCH_NAME }}" = "main" ]; then
            echo "ENV_NAME=prod" >> $GITHUB_ENV
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          else
            echo "ENV_NAME=dev" >> $GITHUB_ENV
            echo "IMAGE_TAG=${{ env.BRANCH_NAME }}-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          fi

      # Create a minimal build context
      - name: Create minimal build context
        run: |
          echo "=== Creating minimal build context ==="
          mkdir -p docker-context
          cp Dockerfile docker-context/
          cp requirements.txt docker-context/
          cp -r myproject docker-context/ || echo "No myproject directory"
          cp -r home docker-context/ || echo "No home directory"
          cp manage.py docker-context/ || echo "No manage.py file"
          echo "Context size: $(du -sh docker-context | cut -f1)"
      
      # Try building with minimal context
      - name: Build with minimal context
        run: |
          echo "=== Building with minimal context ==="
          cd docker-context
          docker build -t test-image .
          echo "Build successful!"
      
      # If the minimal build works, try pushing to ECR
      - name: Push to ECR if minimal build works
        run: |
          if [ "$(docker images -q test-image 2> /dev/null)" != "" ]; then
            echo "=== Pushing to ECR ==="
            docker tag test-image ${{ steps.login-ecr.outputs.registry }}/${{ env.ENV_NAME }}-wagtail-app:${{ env.IMAGE_TAG }}
            docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ENV_NAME }}-wagtail-app:${{ env.IMAGE_TAG }}
          else
            echo "Minimal build failed, not pushing"
            exit 1
          fi